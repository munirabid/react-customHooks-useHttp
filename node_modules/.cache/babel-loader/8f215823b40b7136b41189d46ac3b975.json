{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.hearders ? requestConfig.hearders : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Muneer/React/react-custom-hooks/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","hearders","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGR,WAAW,CAAC,YAAY;AAC1CK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACR,aAAa,CAACS,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MAAd,GAAuBV,aAAa,CAACU,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEX,aAAa,CAACY,QAAd,GAAyBZ,aAAa,CAACY,QAAvC,GAAkD,EAFb;AAG9CC,QAAAA,IAAI,EAAEb,aAAa,CAACa,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACN,QAAQ,CAACS,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AAEAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AACD,KAdD,CAcE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArB8B,EAqB5B,CAACH,aAAD,EAAgBC,SAAhB,CArB4B,CAA/B;AAuBA,SAAO;AACLC,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAhCD;;GAAMP,O;;AAkCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        headers: requestConfig.hearders ? requestConfig.hearders : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  }, [requestConfig, applyData]);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}