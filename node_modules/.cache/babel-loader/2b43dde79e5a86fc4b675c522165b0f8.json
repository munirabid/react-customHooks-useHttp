{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\React\\\\react-custom-hooks\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport NewTask from \"./components/NewTask/NewTask\";\nimport useHttp from \"./hooks/use-http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n\n  const transformTasks = taskObj => {\n    const loadedTasks = [];\n\n    for (const taskKey in taskObj) {\n      loadedTasks.push({\n        id: taskKey,\n        text: taskObj[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  const httpData = useHttp({\n    url: \"https://task-596f0-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\"\n  }, transformTasks);\n\n  const fetchTasks = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://task-596f0-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sDjlTdCg6GhhLK7Hrsm36S5AQVY=\", false, function () {\n  return [useHttp];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Muneer/React/react-custom-hooks/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useHttp","App","tasks","setTasks","transformTasks","taskObj","loadedTasks","taskKey","push","id","text","httpData","url","fetchTasks","taskText","setIsLoading","setError","response","fetch","ok","Error","data","json","err","message","taskAddHandler","task","prevTasks","concat","isLoading","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMO,cAAc,GAAIC,OAAD,IAAa;AAClC,UAAMC,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,OAAX,IAAsBF,OAAtB,EAA+B;AAC7BC,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,OAAN;AAAeG,QAAAA,IAAI,EAAEL,OAAO,CAACE,OAAD,CAAP,CAAiBG;AAAtC,OAAjB;AACD;;AAEDP,IAAAA,QAAQ,CAACG,WAAD,CAAR;AACD,GARD;;AAUA,QAAMK,QAAQ,GAAGX,OAAO,CAAC;AAACY,IAAAA,GAAG,EAAE;AAAN,GAAD,EAAwFR,cAAxF,CAAxB;;AAEA,QAAMS,UAAU,GAAG,MAAOC,QAAP,IAAoB;AACrCC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8EAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMhB,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBc,IAAtB,EAA4B;AAC1Bf,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEW,IAAI,CAACd,OAAD,CAAJ,CAAcG;AAAnC,SAAjB;AACD;;AAEDP,MAAAA,QAAQ,CAACG,WAAD,CAAR;AACD,KAlBD,CAkBE,OAAOiB,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAACO,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDT,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAzBD;;AA2BAnB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMY,cAAc,GAAIC,IAAD,IAAU;AAC/BvB,IAAAA,QAAQ,CAAEwB,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEvB,KADT;AAEE,MAAA,OAAO,EAAE2B,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEjB;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA7DQZ,G;UAaUD,O;;;KAbVC,G;AA+DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Tasks from \"./components/Tasks/Tasks\";\nimport NewTask from \"./components/NewTask/NewTask\";\nimport useHttp from \"./hooks/use-http\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  const transformTasks = (taskObj) => {\n    const loadedTasks = [];\n\n    for (const taskKey in taskObj) {\n      loadedTasks.push({ id: taskKey, text: taskObj[taskKey].text });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  const httpData = useHttp({url: \"https://task-596f0-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\"}, transformTasks);\n\n  const fetchTasks = async (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://task-596f0-default-rtdb.europe-west1.firebasedatabase.app/tasks.json\"\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}